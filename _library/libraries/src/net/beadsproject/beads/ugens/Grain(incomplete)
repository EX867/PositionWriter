//package be.tarsos.dsp.granulator;
package net.beadsproject.beads.ugens;
//This file is fron TarsosDSP source, but I put here because of package problems.
/**
 * The nested class Grain. Stores information about the start time, current position, age, and grain size of the grain.
 */
class Grain{

	/** The position in millseconds. */
	double position;

	/** The age of the grain in milliseconds. */
	double age;

	/** The grain size of the grain. Fixed at instantiation. */
	double grainSize;

	boolean active;

  float[] pan;
	/**
	 * Sets the given Grain to start immediately.
	 *
	 * @param g
	 *            the g
	 * @param time
	 *            the time
	 */
	void reset(double grainSize,double randomness,double position,double timeStretchFactor,double pitchShiftFactor){//tarsos
		double randomTimeDiff = (Math.random() > 0.5 ? +1 : -1) * grainSize * randomness;
		double actualGrainSize = (grainSize + randomTimeDiff) * 1.0/timeStretchFactor + 1;
		this.position = position - actualGrainSize;
		this.age = 0f;
		this.grainSize = actualGrainSize;
		this.active =true;
  }
  /*void resetGrain(Grain g, int time) {//beads
    g.position = position + (grainSizeEnvelope.getValue(0, time) * randomnessEnvelope.getValue(0, time) * (Math.random() * 2.0 - 1.0));
    g.age = 0f;
    g.grainSize = grainSizeEnvelope.getValue(0, time);
  }*/
	void setGrainPan(float panRandomness,outs) {
		pan = new float[outs];
		if(outs == 2) {
			float pan_ = (float)Math.random() * Math.min(1, Math.max(0, panRandomness)) * 0.5f;
			pan_ = Math.random() < 0.5f ? 0.5f + pan_ : 0.5f - pan_;
			pan[0] = pan_ > 0.5f ? 1f : 2f * pan_;
			pan[1] = pan_ < 0.5f ? 1f : 2f * (1 - pan_);
		} else {
			for(int i = 0; i < outs; i++) {
				pan[i] = 1f;
			}
		}
	}
}
